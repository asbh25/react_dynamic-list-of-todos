{"version":3,"sources":["components/TodoList/TodoList.jsx","api/api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","state","status","title","handleSelect","event","setState","target","value","handleChange","toLowerCase","this","props","setUser","changeStatus","todos","filter","todo","completed","includes","className","type","placeholder","onChange","map","key","id","classNames","TodoList__item","readOnly","checked","onClick","userId","Component","BASE_URL","fetchTodos","fetch","then","response","json","result","data","fetchUser","CurrentUser","user","clearUser","name","email","phone","App","selectedUserId","componentDidMount","a","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.33c5f59f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport class TodoList extends Component {\n  state = {\n    status: 'All',\n    title: '',\n  }\n\n  handleSelect = (event) => {\n    this.setState({ status: event.target.value });\n  }\n\n  handleChange = (event) => {\n    this.setState({ title: event.target.value.toLowerCase() });\n  }\n\n  render() {\n    const { setUser, changeStatus } = this.props;\n    const { status, title } = this.state;\n    let { todos } = this.props;\n\n    switch (status) {\n      case 'Completed':\n        todos = todos.filter(todo => todo.completed);\n        break;\n      case 'Not completed':\n        todos = todos.filter(todo => !todo.completed);\n        break;\n      default:\n        break;\n    }\n\n    if (title) {\n      todos = todos.filter(todo => todo.title.includes(title));\n    }\n\n    return (\n      <div className=\"TodoList\">\n        <input\n          type=\"text\"\n          placeholder=\"Search by title\"\n          onChange={this.handleChange}\n        />\n        <select\n          value={status}\n          onChange={this.handleSelect}\n        >\n          <option value=\"All\">All</option>\n          <option value=\"Completed\">Completed</option>\n          <option value=\"Not completed\">Not completed</option>\n        </select>\n        <h2>Todos:</h2>\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {todos.map(todo => (\n              <li\n                key={todo.id}\n                className={classNames({\n                  TodoList__item: true,\n                  'TodoList__item--unchecked': !todo.completed,\n                  'TodoList__item--checked': todo.completed,\n                })}\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    readOnly\n                    checked={todo.completed}\n                    onClick={() => changeStatus(todo.id)}\n                  />\n                  <p>{todo.title}</p>\n                </label>\n                <button\n                  className=\"\n                  TodoList__user-button\n                  TodoList__user-button--selected\n                  button\n                  \"\n                  type=\"button\"\n                  onClick={() => setUser(todo.userId)}\n                >\n                  {`User #${todo.userId}`}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      userId: PropTypes.number.isRequired,\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }),\n  ).isRequired,\n  setUser: PropTypes.func.isRequired,\n  changeStatus: PropTypes.func.isRequired,\n};\n","const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const fetchTodos = () => (\n  fetch(`${BASE_URL}/todos/`)\n    .then(response => response.json())\n    .then(result => result.data)\n);\n\nexport const fetchUser = userId => (\n  fetch(`${BASE_URL}/users/${userId}`)\n    .then(response => response.json())\n    .then(json => json.data)\n);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { fetchUser } from '../../api/api';\nimport './CurrentUser.scss';\n\nexport class CurrentUser extends Component {\n  state = {\n    user: {},\n  }\n\n  componentDidMount() {\n    const { userId } = this.props;\n\n    fetchUser(userId)\n      .then(user => this.setState({ user }));\n  }\n\n  componentDidUpdate() {\n    const { userId } = this.props;\n\n    if (this.state.user.userId === userId) {\n      return;\n    }\n\n    fetchUser(userId)\n      .then(user => this.setState({ user }));\n  }\n\n  render() {\n    const { user } = this.state;\n    const { clearUser } = this.props;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          {`Selected user: ${this.props.userId}`}\n        </h2>\n        <h3 className=\"CurrentUser__name\">{user.name}</h3>\n        <p className=\"CurrentUser__email\">{user.email}</p>\n        <p className=\"CurrentUser__phone\">{user.phone}</p>\n        <button\n          type=\"button\"\n          onClick={() => clearUser()}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  clearUser: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { fetchTodos } from './api/api';\n\nclass App extends Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  componentDidMount = async() => {\n    const todos = await fetchTodos();\n\n    this.setState({\n      todos: todos.filter(todo => todo.title && todo.userId && todo.id),\n    });\n  }\n\n  setUser = (userId) => {\n    this.setState({ selectedUserId: userId });\n  }\n\n  changeStatus = (id) => {\n    this.setState(state => ({\n      todos: state.todos.map((todo) => {\n        if (todo.id === +id) {\n          return {\n            ...todo,\n            completed: !todo.completed,\n          };\n        }\n\n        return { ...todo };\n      }),\n    }));\n  }\n\n  clearUser = () => {\n    this.setState({ selectedUserId: 0 });\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            setUser={this.setUser}\n            changeStatus={this.changeStatus}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearUser={this.clearUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}